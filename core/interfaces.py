from __future__ import annotations
from typing import Protocol, Any, Iterable, Optional, Dict
from pandas import DataFrame

class RealtimeProvider(Protocol):
    def get_quote(self, symbol: str) -> Dict[str, Any]: ...

class DataProvider(Protocol):
    def get_all_stock_list(self) -> DataFrame: ...
    def get_daily_prices(self, symbol: str, start: Optional[str] = None, end: Optional[str] = None) -> DataFrame: ...

class FeatureGenerator(Protocol):
    def generate(self, prices: DataFrame) -> DataFrame: ...

class SignalGenerator(Protocol):
    def generate_signals(self, df: DataFrame) -> Iterable[Any]: ...

class BacktestEngine(Protocol):
    def run(self, prices: DataFrame, signals: Iterable[Any]) -> Dict[str, Any]: ...

class RiskManager(Protocol):
    def evaluate(self, prices: DataFrame, signals: Iterable[Any]) -> Dict[str, Any]: ...

class TradingSystem(Protocol):
    def decide(self, prices: DataFrame, signals: Iterable[Any]) -> Dict[str, Any]: ...

class ModelTrainer(Protocol):
    def train(self, features: DataFrame, labels: DataFrame) -> Any: ...
